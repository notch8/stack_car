version: '2.1'
services:
<% if options[:postgres] -%>
  postgres:
    image: postgres:11.1
    env_file:
      - .env
      - .env.development
    ports:
      - "5432"
    volumes:
      - 'postgres:/var/lib/postgresql/data'
<% end -%>
<% if options[:mysql] -%>
  mysql:
    image: mysql:5.7
    env_file:
      - .env
      - .env.development
    ports:
      - '3306'
    volumes:
      - 'mysql:/var/lib/mysql'
<% end -%>
<% if options[:elasticsearch] -%>
  elasticsearch:
    image: elasticsearch:1.7.1
    env_file:
      - .env
      - .env.development
    ports:
      - "9200"
      - "9300"
    volumes:
      - 'elasticsearch:/usr/share/elasticsearch/data'
<% end -%>
<% if options[:solr] %>
  solr:
    image: solr:latest
    env_file:
      - .env
      - .env.development
    ports:
      - "8983"
    volumes:
      - 'solr:/opt/solr/server/solr/mycores'
    entrypoint:
      - docker-entrypoint.sh
      - solr-precreate
      - mycore
    # docker-compose exec --user=solr solr bin/solr create_core -c CORENAME
<% end -%>
<% if options[:redis] -%>
  redis:
    image: 'redis:3.2-alpine'
    env_file:
      - .env
      - .env.development
    command: redis-server
    ports:
      - '6379'
    volumes:
      - 'redis:/var/lib/redis/data'
<% end -%>
<% if options[:mongodb] -%>
  mongodb:
    image: mongo:2.6.12
    env_file:
      - .env
      - .env.development
    volumes:
      - 'mongodb:/data/db'
    ports:
      - "27017"
<% end -%>
<% if options[:memcached] -%>
  memcached:
    image: memcached
    env_file:
      - .env
      - .env.development
    ports:
      - "11211"
<% end -%>
<% if options[:fcrepo] -%>
  fcrepo:
    image: botimer/fcrepo:4.5.1
    env_file:
      - .env
      - .env.development
    volumes:
      - 'fcrepo:/opt/data'
    ports:
      - "8080"
<% end -%>

  base:
    image: "${REGISTRY_HOST}${REGISTRY_URI}/base:latest"
    build:
      context: .
      dockerfile: Dockerfile.base
      args:
        DEPLOY_KEY: "${DEPLOY_KEY}"
        APP_NAME: "${APP_NAME}"
        REPO_URL: "${REPO_URL}"
    env_file:
      - .env
      - .env.development

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DEPLOY_KEY: "${DEPLOY_KEY}"
        REPO_URL: "${REPO_URL}"
        BRANCH: "${BRANCH}"
    image: "${REGISTRY_HOST}${REGISTRY_URI}:${TAG:-master}"
    env_file:
      - .env
      - .env.development
    volumes:
      - .:/home/app/webapp
    # Keep the stdin open, so we can attach to our app container's process
    # and do things such as byebug, etc:
    stdin_open: true
    # Enable sending signals (CTRL+C, CTRL+P + CTRL+Q) into the container:
    tty: true

  web:
    extends:
      app:
    ports:
      - "${WEB_PORT}"
    environment:
      - VIRTUAL_HOST=<%= @project_name %>.docker
      - VIRTUAL_PORT=80
    depends_on:
<%= compose_depends %>

<% if options[:delayed_job] %>
  worker:
    extends: app
    command: ./bin/delayed_job run
<%= compose_depends %>
<% end %>

<% if options[:sidekiq] %>
  worker:
    extends: app
    command: bundle exec sidekiq
<%= compose_depends %>
<% end %>

volumes:
<% if options[:postgres] -%>
  postgres:
<% end -%>
<% if options[:mysql] -%>
  mysql:
<% end -%>
<% if options[:elasticsearch] -%>
  elasticsearch:
<% end -%>
<% if options[:solr] -%>
  solr:
<% end -%>
<% if options[:redis] -%>
  redis:
<% end -%>
<% if options[:mongodb] -%>
  mongodb:
<% end -%>
<% if options[:fcrepo] -%>
  fcrepo:
<% end -%>
