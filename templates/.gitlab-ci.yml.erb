image: docker:latest
services:
  - docker:dind
<% if options[:postgres] -%>
  - postgres:latest
<% end -%>
<% if options[:mysql] -%>
  - mysql:latest
<% end -%>
<% if options[:solr] -%>
  - solr:latest
<% end -%>
<% if options[:elasticsearch] -%>
  - elasticsearch:latest
<% end -%>
<% if options[:redis] -%>
  - redis:latest
<% end -%>

stages:
  - build
  - test
  - review
  - staging
  - production

variables:
<% if options[:postgres] -%>
  POSTGRES_DB: <%= @project_name %>
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password
  POSTGRES_HOST: postgres
<% end -%>
<% if options[:mysql] -%>
  MYSQL_DATABASE: <%= @project_name %>
  MYSQL_ROOT_PASSWORD: password
  MYSQL_USER: <%= @project_name %>_test
  MYSQL_PASSWORD: password
  MYSQL_HOST: mysql
<% end -%>
  TEST_DB: <%= @project_name %>
  DOCKER_DRIVER: overlay
  REGISTRY_HOST: registry.gitlab.com
  REGISTRY_URI: TODO/<%= @project_name %>
  SITE_URI_BASE: TODO

build:
  stage: build
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_PROJECT_NAME-$CI_BUILD_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_PROJECT_NAME-$CI_BUILD_REF_SLUG"
  variables:
    GIT_STRATEGY: fetch
  tags:
    - docker

test:
  stage: test
  image: $CI_REGISTRY_IMAGE:$CI_PROJECT_NAME-$CI_BUILD_REF_SLUG
  script:
    - cd /app && bundle exec rake db:create db:schema:load spec
  tags:
    - docker
  variables:
    GIT_STRATEGY: none

review:
  stage: review
  image: docker:latest
  type: deploy
  environment:
    name: $CI_PROJECT_NAME-$CI_BUILD_REF_SLUG
    url: http://web.$CI_PROJECT_NAME-$CI_BUILD_REF_SLUG.staging.$SITE_URI_BASE
    on_stop: stop_review
  only:
    - branches
  except:
    - master
  script:
<% if options[:rancher] -%>
    - wget https://github.com/rancher/cli/releases/download/v0.4.1/rancher-linux-amd64-v0.4.1.tar.gz
    - tar zxfv rancher-linux-amd64-v0.4.1.tar.gz
    - export RANCHER_ENVIRONMENT=staging
    - export TAG=$CI_PROJECT_NAME-$CI_BUILD_REF_SLUG
    - ./rancher-v0.4.1/rancher up -p -d -u -c -s $TAG -f docker-compose-ci.yml
<% end %>
  variables:
    GIT_STRATEGY: fetch
  tags:
    - docker
    - mysql

stop_review:
  stage: review
  script:
<% if options[:rancher] -%>
    - wget https://github.com/rancher/cli/releases/download/v0.4.1/rancher-linux-amd64-v0.4.1.tar.gz
    - tar zxfv rancher-linux-amd64-v0.4.1.tar.gz
    - export RANCHER_ENVIRONMENT=staging
    - ./rancher-v0.4.1/rancher rm $CI_PROJECT_NAME-$CI_BUILD_REF_SLUG
<% end %>
  variables:
    GIT_STRATEGY: none
  when: manual
  environment:
    name: $CI_PROJECT_NAME-$CI_BUILD_REF_SLUG
    action: stop

staging:
  stage: staging
  type: deploy
  script:
<% if options[:rancher] -%>
    - ./ops/deploy-app
<% end -%>
<% if options[:heroku] -%>
  - gem install dpl multi_json
  - dpl --provider=heroku --app=<%= @project_name %>-staging --api-key=$HEROKU_STAGING_API_KEY --run="bundle exec rake db:migrate"
<% end -%>
  only:
    - master
  variables:
    GIT_STRATEGY: fetch
  tags:
    - docker

production:
  stage: production
  type: deploy
  script:
<% if options[:rancher] -%>
    - ./ops/deploy-app
<% end -%>
<% if options[:heroku] -%>
  - gem install dpl multi_json
  - dpl --provider=heroku --app=<%= @project_name %> --api-key=$HEROKU_PRODUCTION_API_KEY --run="bundle exec rake db:migrate"
<% end -%>
  when: manual
  only:
    - master
  variables:
    GIT_STRATEGY: fetch
  tags:
    - docker
