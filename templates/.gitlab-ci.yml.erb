stages:
- build
- lint
- test
- deploy

before_script:
- export TAG=${CI_COMMIT_SHORT_SHA}
- export BRANCH=${CI_COMMIT_REF_NAME}
- export REGISTRY_HOST=${CI_REGISTRY}
- export REGISTRY_URI="/${CI_PROJECT_PATH}"

base:
  stage: build
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - sc build -s base
    - sc push -s base
  when: manual
  tags:
    - local

build:
  stage: build
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - sc build
    - sc push
    - docker tag $CI_REGISTRY_IMAGE:$TAG $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  tags:
    - local

lint:
  stage: go
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  variables:
    PRONTO_GITLAB_API_ENDPOINT: "https://gitlab.com/api/v4"
  before_script:
    - export PRONTO_GITLAB_API_PRIVATE_TOKEN=$GITLAB_API_TOKEN
  script:
    - cd /home/app/webapp && bundle exec pronto run -f gitlab
  tags:
    - docker

test:
  stage: test
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  services:
    <% if options[:postgres] -%>
    - name: postgres:11.1
    <% end -%>
    <% if options[:mysql] -%>
    - mysql:5.7
    <% end -%>
    <% if options[:solr] -%>
    - name: solr:latest
      entrypoint: ["docker-entrypoint.sh", "solr-precreate", "test"]
    <% end -%>
    <% if options[:elasticsearch] -%>
    - elasticsearch:latest
    <% end -%>
    <% if options[:redis] -%>
    - redis:latest
    <% end -%>
    <% if options[:fcrepo] -%>
    - name: botimer/fcrepo:4.5.1
    <% end %>
  variables:
  <% if options[:postgres] -%>
    POSTGRES_DB: <%= @project_name %>
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: password
    POSTGRES_HOST: postgres
    DATABASE_ADAPTER: postgresql
    DATABASE_HOST: postgres
    DATABASE_NAME: <%= @project_name %>
    DATABASE_PASSWORD: password
    DATABASE_USER: postgres
  <% end -%>
  <% if options[:mysql] -%>
    MYSQL_DATABASE: <%= @project_name %>
    MYSQL_ROOT_PASSWORD: password
    MYSQL_USER: <%= @project_name %>_test
    MYSQL_PASSWORD: password
    MYSQL_HOST: mysql
    DATABASE_ADAPTER: mysql2
    DATABASE_HOST: mysql
    DATABASE_NAME: <%= @project_name %>
    DATABASE_PASSWORD: password
    DATABASE_USER: <%= @project_name %>_test
  <% end -%>
    TEST_DB: <%= @project_name %>
    SITE_URI_BASE: TODO
  script:
    - cd /home/app/webapp && bundle exec rake db:create db:schema:load spec
  tags:
    - docker
  variables:
    GIT_STRATEGY: none

review:
  stage: review
  type: deploy
  environment:
    name: $CI_COMMIT_REF_SLUG
    url: http://web.$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG.staging.$SITE_URI_BASE
    on_stop: stop_review
  only:
    - branches
  except:
    - master
  script:
<% if options[:rancher] -%>
    - export RANCHER_ENVIRONMENT=staging
    - sc provision ci
<% elsif options[:helm] -%>
    - ./chart/bin/deploy review $CI_COMMIT_REF_SLUG
<% else -%>
    - CHANGME
<% end -%>
 tags:
    - local

stop_review:
  stage: review
  script:
<% if options[:rancher] -%>
    - export RANCHER_ENVIRONMENT=staging
    - rancher rm $CI_PROJECT_NAME-$CI_BUILD_REF_SLUG
<% elsif options[:helm] -%>
    - ./chart/bin/remove review $CI_COMMIT_REF_SLUG
<% end %>
  when: manual
  environment:
    name: $CI_PROJECT_NAME-$CI_BUILD_REF_SLUG
    action: stop

staging:
  stage: staging
  type: deploy
  script:
<% if options[:rancher] -%>
  - sc deploy staging
<% elsif options[:helm] -%>
  - ./chart/bin/deploy staging $CI_COMMIT_REF_SLUG
<% end -%>
<% if options[:heroku] -%>
  - dpl --provider=heroku --app=<%= @project_name %>-staging --api-key=$HEROKU_STAGING_API_KEY --run="bundle exec rake db:migrate"
<% end -%>
  only:
    - master
  tags:
    - local

production:
  stage: production
  type: deploy
  script:
<% if options[:rancher] -%>
    - sc deploy production
<% elsif options[:helm] -%>
  - ./chart/bin/deploy production $CI_COMMIT_REF_SLUG
<% end -%>
<% if options[:heroku] -%>
  - dpl --provider=heroku --app=<%= @project_name %> --api-key=$HEROKU_PRODUCTION_API_KEY --run="bundle exec rake db:migrate"
<% end -%>
  when: manual
  only:
    - master
  tags:
    - local
